#This script processes a PAF (Pairwise mApping Format) output file generated by Minimap2,
# which contains alignment information for Nanopore sequencing reads. 
# The script is designed to handle reads from a single barcode mapped to a specific reference genome.
# It calculates the number of matching bases and the number of mapped reads based on specific filtering criteria.

#First draft written Oct 2024

# Required libraries
import csv
import sys

# Check if the correct number of arguments is provided
# Should look like python scripts/calculate_minimapped_bases.py genome_coverage/z_tritici/barcode01_mapped.paf 
if len(sys.argv) != 2:
    print("Usage: python calculate_minimapped_bases.py <minimap_paf_output>")
    sys.exit(1)

# Extract the arguments
minimap2_output = sys.argv[1]

def calculate_minimapped_bases(minimap2_output):
    read_longest_alignment = {} # Dictionary to store the longest alignment for each read

    with open(minimap2_output, 'r') as minimap2_output_file:
        reader = csv.reader(minimap2_output_file, delimiter='\t')

        for row in reader:
            # Extract relevant fields
            read_id = row[0]                # Name of the read (column 1)
            mq = int(row[11])                # Mapping quality (column 12)
            matching_bases = int(row[9])     # Number of matching bases (column 10)
            total_bases = int(row[10])       # Number bases, including gaps, in the mapping (col 11)
            identity = (matching_bases / total_bases)* 100 # Calculate the identity of the mapping

        # Filter on MQ > 5 or = 0
            if( mq > 5 or mq == 0) and identity > 5: #can alter the filtering criteria as needed
                # Check if the read is already encountered
                if read_id not in read_longest_alignment:
                    # If new, add the read and its matching base count
                    read_longest_alignment[read_id] = matching_bases
                else:
                    # If already seen, store the highest number of matching bases
                    if matching_bases > read_longest_alignment[read_id]:
                        read_longest_alignment[read_id] = matching_bases
    
    total_matching_bases = sum(read_longest_alignment.values())
    number_of_mapped_reads = len(read_longest_alignment) #to work out how many unique read IDs were considered 'mapped' to the reference

    # Extract the reference genome and barcode from the file path
    # This will only work in this specific situation where the path is genome_coverage/reference_genome/barcode_mapped.paf
    parts = minimap2_output.split('/')  # Split the full file path by '/'
    if len(parts) >= 3:
        reference_genome = parts[-2]  # Extract the genome part
        barcode = parts[-1]  # Extract the barcode part
    else:
        reference_genome = "unknown"
        barcode = "unknown"

    # Print the results in a tab-delimited format
    print(f"{reference_genome}\t{barcode}\t{total_matching_bases}\t{number_of_mapped_reads}")


#Run the function
calculate_minimapped_bases(minimap2_output)
            